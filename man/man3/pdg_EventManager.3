.TH "EventManager" 3 "Mon Oct 26 2015" "Version v0.9.5" "Pixel Dust Game Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EventManager \- 
.PP
Distributes events to event handlers\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBEventEmitter\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "object \fBgetDeviceOrientation\fP (boolean absolute=false)"
.br
.RI "\fI\fINOT IMPLEMENTED\fP get the roll, pitch and yaw of the device \fP"
.ti -1c
.RI "boolean \fBisButtonDown\fP (int buttonNumber=0)"
.br
.RI "\fIcheck if button is down \fP"
.ti -1c
.RI "boolean \fBisKeyDown\fP (string unicodeChar)"
.br
.RI "\fIcheck if a key is down \fP"
.ti -1c
.RI "boolean \fBisKeyDown\fP (uint utf16CharCode)"
.br
.RI "\fIcheck if a key is down \fP"
.ti -1c
.RI "boolean \fBisRawKeyDown\fP (int keyCode)"
.br
.RI "\fIcheck if a key is down \fP"
.in -1c
.SS "Related Functions"
(Note that these are not member functions\&.) 
.in +1c
.ti -1c
.RI "\fBevt\fP"
.br
.RI "\fIthe singleton instance of the \fBEventManager\fP \fP"
.ti -1c
.RI "\fBgetEventManager\fP"
.br
.RI "\fIget the singleton instance of the \fBEventManager\fP used by the pdg framework \fP"
.in -1c
.SH "Detailed Description"
.PP 
Distributes events to event handlers\&. 

\fBPrecondition:\fP
.RS 4
\fBAPI Stability: 3 - Stable\fP\&. The API has proven satisfactory, but cleanup in the underlying code may cause minor changes\&. Backwards-compatibility is guaranteed\&.
.RE
.PP
The \fBEventManager\fP is the core ofthe Pixel Dust Games Framework\&. All inputs to your game arrive as events via the Event Manager\&. This includes network messages and system level notifications in addition to user inputs such as keystrokes and mouse movements\&.
.PP
The \fBEventManager\fP expects the game developer to implement \fBIEventHandler\fP subclasses and register them to handle various events they are interested in\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBIEventHandler\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "getDeviceOrientation (booleanabsolute = \fCfalse\fP)"

.PP
\fINOT IMPLEMENTED\fP get the roll, pitch and yaw of the device On mobile devices which allow the screen to be oriented different ways, this reports the current relative roll, pitch and yaw of the device\&. If absolute is if absolute is true, then yaw is compass direction from north around vertical axis, pitch is rotation around E -> W axis, and roll is rotation around N -> S axis
.PP
\fBParameters:\fP
.RS 4
\fIabsolute\fP flag to indicate if roll, pitch and yaw are around compass directions (true) or relative (false) 
.RE
.PP
\fBReturns:\fP
.RS 4
object with roll, pitch and yaw values
.RE
.PP

.SS "isButtonDown (intbuttonNumber = \fC0\fP)"

.PP
check if button is down Check the state of a particular mouse button or finger touch\&. For touch devices the number represents the order the fingers went down rather than specific physical buttons as on a mouse\&.
.PP
\fBParameters:\fP
.RS 4
\fIbuttonNumber\fP the particular mouse button; defaults to zero, the left mouse button or first touch
.RE
.PP
\fBReturns:\fP
.RS 4
true if the button down or the finger is touching, or false if not 
.RE
.PP

.SS "isKeyDown (stringunicodeChar)"

.PP
check if a key is down Check the state of a particular key as passed in a string\&. The string should be a single character that matches the value returned in KeyPressEvent\&.unicode for the desired key\&. If the string passed has multiple characters, only the first character will be used\&. This form of the call is typically used for printable characters\&.
.PP
.PP
.nf
var eKeyDown = pdg\&.evt\&.isKeyDown('E');
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIunicodeChar\fP the character that is generated by the key to be checked
.RE
.PP
\fBReturns:\fP
.RS 4
true if the key is pressed, or false if not
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBKeyPressEvent\fP 
.PP
\fBKey Code Constants\fP 
.RE
.PP

.SS "isKeyDown (uintutf16CharCode)"

.PP
check if a key is down Check the state of a particular key as passed as a UTF-16 character code value\&. This code matches the value returned in KeyPressEvent\&.unicode for the desired key\&. This is the form that would be used for non-printable codes such as key_UpArrow, key_Enter, etc\&.\&.\&.
.PP
.PP
.nf
var upKeyPressed = pdg\&.evt\&.isKeyDown(pdg\&.key_UpArrow);
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIutf16CharCode\fP the unicode value that is generated by the key to be checked
.RE
.PP
\fBReturns:\fP
.RS 4
true if the key is pressed, or false if not
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBKeyPressEvent\fP 
.PP
\fBKey Code Constants\fP 
.RE
.PP

.SS "isRawKeyDown (intkeyCode)"

.PP
check if a key is down Check the state of a particular key as passed as raw OS/hardware specific value\&. This code matches the value returned in KeyEvent\&.keyCode for the desired key\&. Since the keyCode values usually won't be known ahead of time, this is mainly useful when your app gives the user the ability to custom map keys to particular functions\&.
.PP
.PP
.nf
var mappedKeyValue = event\&.keyCode;  // save the user's key mapping
\&.\&.\&.
// check to see if the key the user mapped is pressed
var myMappedKeyPressed = pdg\&.evt\&.isKeyDown(mappedKeyValue);
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIkeyCode\fP the raw OS key code that is generated by the key to be checked 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the key is pressed, or false if not
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBKeyEvent\fP 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "getEventManager\fC [related]\fP"

.PP
get the singleton instance of the \fBEventManager\fP used by the pdg framework \fBReturns:\fP
.RS 4
\fBEventManager\fP singleton object 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Pixel Dust Game Engine from the source code\&.
